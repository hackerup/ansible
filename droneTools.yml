---
- hosts: drone

  vars:
    allowedIPs:
      - <IP1>
      - <IP2>
      - <IP3>

    #If your Client is running on Windows/Mac, download Windows/Mac and Linux installation
    cobaltstrikeInstallation: <cobaltstrike-dist.tgz>

    #Flat text file with key
    cobaltstrikeLicense: <cobalt_license.txt>

    msfDatabaseUser: <USERNAME>

    msfDatabasePassword: <PASSWORD>

    #Download Nessus install file from https://www.tenable.com/downloads/nessus and save to Ansible Server home dir
    #Select Debian 64bit version for drone
    nessusInstallFile: <Nessus-8.8.0-debian6_amd64.deb> #Nessus-8.8.0-debian6_i386.deb

    nessusLicense: <XXXX-XXXX-XXXX-XXXX>

    nessusUser: <USERNAME>

    nessusPassword: <PASSWORD>

    #don't forget trailing slash!!
    #This path is on the drone
    #userHomePath: </home/username/>
    userHomePath: </root/>

    required_packages:
      - libssl-dev
      - libffi-dev
      - python-dev
      - build-essential
      - python-pip
      - ufw

  tasks:
    - name: Update APT package cache
      become: true
      apt: 
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade APT to the latest packages
      become: true
      apt: 
        upgrade: safe

    - name: Install required packages
      become: true
      apt: 
        state: present
        pkg: "{{ required_packages}}"

    #CrackMapExec
    - name: CrackMapExec - Download CrackMapExec (Bleeding) from source from GitHub
      git: 
        repo: "https://github.com/byt3bl33d3r/CrackMapExec"
        dest: "{{ userHomePath }}CrackMapExec"
        recursive: yes

    - name: CrackMapExec - Install pipenv
      become: true
      shell: pip install --user pipenv
      args:
        chdir: "{{ userHomePath }}CrackMapExec"

    - name: CrackMapExec - Install pipenv and use it to install CrackMapExec
      shell: |
         pipenv install

         "{{ userHomePath }}.local/bin/pipenv run python setup.py install"
      args:
        chdir: "{{ userHomePath }}CrackMapExec"

    #Impacket
    - name: Impacket - Download Impacket from GitHub
      git: 
        repo: "https://github.com/SecureAuthCorp/impacket.git"
        dest: "{{ userHomePath }}impacket"

    - name: Impacket - Run setup file with pip to install Impacket
      shell: pip install .
      args:
        chdir: "{{ userHomePath }}impacket"

    #Responder
    - name: Responder - Download Responder from GitHub
      git: 
        repo: "https://github.com/lgandx/Responder.git"
        dest: "{{ userHomePath }}Responder"

    #EyeWitness
    - name: EyeWitness - Download EyeWitness from GitHub
      git: 
        repo: "https://github.com/FortyNorthSecurity/EyeWitness.git"
        dest: "{{ userHomePath }}EyeWitness"

    - name: EyeWitness - Run setup file to install EyeWitness
      become: true
      shell: /bin/bash setup.sh
      args:
        chdir: "{{ userHomePath }}EyeWitness/setup"

    #Install Cobalt Strike
    - name: CobaltStrike - Upload Cobalt Strike installation package from ansible host
      copy:
        src: "{{ cobaltstrikeInstallation }}"
        dest: "{{ userHomePath }}cobaltstrike-trial.tgz"

    - name: CobaltStrike - Unzip Cobalt Strike installation package to /opt
      unarchive:
        src: "{{ userHomePath }}cobaltstrike-trial.tgz"
        dest: "{{ userHomePath }}"
        remote_src: yes
      become: yes

    - name: CobaltStrike - Upload Cobalt Strike license key to ~/root
      copy:
        src: "{{ cobaltstrikeLicense }}"
        dest: "{{ userHomePath }}.cobaltstrike.license"
      become: true

    - name: CobaltStrike - Update Cobalt Strike
      become: true
      shell: "{{ userHomePath }}cobaltstrike/update"
      args:
        chdir: "{{ userHomePath }}cobaltstrike"

    - name: CobaltStrike - Change CobaltStrike management port from default
      become: true
      replace:
        dest: "{{ userHomePath }}cobaltstrike/teamserver"
        regexp: 50050
        replace: 42424

    - name: CobaltStrike - Firewall rule to restrict access to CobaltStrike management port on 42424
      become: true
      ufw: 
        rule: allow
        port: 42424
        proto: tcp
        src: "{{ item }}"
      with_items:
        - "{{ allowedIPs }}"

#    - name: CobaltStrike - Upload SSL fullchain PEM file from ansible host
#      copy:
#        src: "{{ domain }}_fullchain.pem"
#        dest: "{{ domain }}_fullchain.pem"
        
#    - name: CobaltStrike - Upload SSL privkey PEM file from ansible host
#      copy:
#        src: "{{ domain }}_privkey.pem"
#        dest: "{{ domain }}_privkey.pem"
        
#    - name: CobaltStrike - Build Java keystore via keytool to enable SSL comms
#      become: true
#      shell: "keytool -importkeystore -deststorepass {{ password }} -destkeypass {{ password }} -destkeystore {{ domain }}.store -srckeystore {{ domain }}.p12 -srcstoretype PKCS12 -srcstorepass {{ password }} -alias {{ domain }}"      

#    - name: Download Cobalt Srike Java client to ansible host
#      become: true
#      fetch:
#        src: "{{ userHomePath }}cobaltstrike/cobaltstrike.jar"
#        dest: cobaltstrike.jar
  
#      - name: Download Cobalt Srike Java client to ansible host
#      become: true
#      fetch:
#        src: "{{ userHomePath }}cobaltstrike/cobaltstrike"
#        dest: cobaltstrike


    #Metasploit
    - name: Metasploit - Download Metasploit installer
      get_url:
        url: https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb
        dest: "{{ userHomePath }}msfinstall"
        mode: 0755

    - name: Metasploit - Install Metasploit
      become: true
      command: "{{ userHomePath }}msfinstall"
  
    - name: Metasploit - Update Metasploit
      become: true
      command: msfupdate

    - name: Metasploit - Initialize Metasploit database
      become: true
      expect:
        command: msfdb init
        responses:
          '\]:': "{{ msfDatabaseUser }}"
          '\):*': "{{ msfDatabasePassword }}"
    
    #Proxychains at /usr/bin/proxychains4
    - name: Proxychains - Download proxychains-NG from GitHub
      git:
        repo: https://github.com/rofl0r/proxychains-ng.git
        dest: "{{ userHomePath }}proxychains-ng"

    - name: Proxychains - Configure GCC
      shell: "{{ userHomePath }}proxychains-ng/configure --prefix=/usr --sysconfdir=/etc"
      args:
        chdir: "{{ userHomePath }}proxychains-ng"

    - name: Proxychains - Make
      shell: make
      args:
        chdir: "{{ userHomePath }}proxychains-ng"

    - name: Proxychains - Sudo make install
      become: true
      shell: make install
      args:
        chdir: "{{ userHomePath }}proxychains-ng"

    - name: Proxychains - Sudo make install-config
      become: true
      shell: make install-config
      args:
        chdir: "{{ userHomePath }}proxychains-ng"

    #Nessus
    - name: Nessus - Firewall rule to restrict access to Nessus management port on 8834
      become: true
      ufw: 
        rule: allow
        port: 8834
        proto: tcp
        src: "{{ item }}"
      with_items:
        - "{{ allowedIPs }}"

    - name: Nessus - Upload Nessus install file from Ansible Server
      copy:
        src: "{{ nessusInstallFile }}"
        dest: "{{ nessusInstallFile }}"
        
    - name: Nessus - Install Nessus
      become: true
      shell: "dpkg -i {{ nessusInstallFile }}"

    - name: Nessus - Register Nessus with License Key
      become: true
      shell: /opt/nessus/sbin/nessuscli fetch --register {{ nessusLicense }}

    - name: Nessus - Add Nessus 'admin' user and configure password
      become: true
      expect:
        command: /opt/nessus/sbin/nessuscli adduser {{ nessusUser }}
        responses:
          'Login password:*': "{{ nessusPassword }}"
          'Login password \(again\):*': "{{ nessusPassword }}"
          '\[n\]:*': 'y'
          'set\)*': "\n" 
          'that ok? \[n\]:*' : 'y'

    - name: Nessus - Start Nessus service
      become: true
      shell: /etc/init.d/nessusd start

    - debug: 
        msg: Browse to https://DRONEIP:8834, wait for Nessus to initialize (this will take a while), and complete registration
